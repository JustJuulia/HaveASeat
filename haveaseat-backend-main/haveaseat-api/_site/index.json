{
  "api/haveaseat.Controllers.ForbiddenDateController.html": {
    "href": "api/haveaseat.Controllers.ForbiddenDateController.html",
    "title": "Class ForbiddenDateController",
    "keywords": "Class ForbiddenDateController Namespace haveaseat.Controllers Assembly haveaseat-api.dll This controller handles forbidden date related operations such as adding, editing, deleting and retrieving forbidden date information. [ApiController] [Route(\"api/[controller]\")] public class ForbiddenDateController : ControllerBase Inheritance object ControllerBase ForbiddenDateController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ForbiddenDateController(IForbiddenDateRepository) This controller handles forbidden date related operations such as adding, editing, deleting and retrieving forbidden date information. public ForbiddenDateController(IForbiddenDateRepository forbiddenDateRepository) Parameters forbiddenDateRepository IForbiddenDateRepository The IForbiddenDateRepository instance used for accessing methods to manipulate forbidden date data. See Also ForbiddenDate ForbiddenDateRepository Methods AddForbiddenDate(NewForbiddenDateDTO) This task adds a forbidden date with the data provided from the HTTP POST request. [HttpPost(\"AddForbiddenDate\")] [ProducesResponseType(201)] [ProducesResponseType(400)] [ProducesResponseType(500)] public Task<IActionResult> AddForbiddenDate(NewForbiddenDateDTO newForbiddenDate) Parameters newForbiddenDate NewForbiddenDateDTO The ForbiddenDate object containing the details of the forbidden date to be added. Returns Task<IActionResult> Returns a Created status if all requiments are met, a BadRequest status if NewForbiddenDateDTO wasn't send, a BadRequest status if forbidden date already exist, an InternalServerError status if the record wasn't added to the database despite all requirements being met, See Also NewForbiddenDateDTO DeleteForbiddenDateByDate(DateOnly) This task deletes forbidden date based on the provided date from the HTTP Delete request. [HttpDelete(\"delete/{date}\")] [ProducesResponseType(typeof(bool), 202)] [ProducesResponseType(400)] [ProducesResponseType(500)] public Task<IActionResult> DeleteForbiddenDateByDate(DateOnly date) Parameters date DateOnly The date to be deleted. Returns Task<IActionResult> Returns status Accepted and true if all requirements are met, a BadRequest if date wasn't send, a BadRequest if date isn't forbidden, an InternalServerError EditForbiddenDateByDate(NewForbiddenDateDTO) [HttpPost(\"EditForbiddenDate\")] [ProducesResponseType(typeof(bool), 200)] [ProducesResponseType(400)] [ProducesResponseType(500)] public Task<IActionResult> EditForbiddenDateByDate(NewForbiddenDateDTO newForbiddenDate) Parameters newForbiddenDate NewForbiddenDateDTO Returns Task<IActionResult> GetAllForbiddenDates() [HttpGet(\"getAllForbiddenDates\")] [ProducesResponseType(typeof(List<ForbiddenDateDTO>), 200)] public Task<IActionResult> GetAllForbiddenDates() Returns Task<IActionResult> GetForbiddenDateByDate(DateOnly) [HttpGet(\"GetByDate/{date}\")] [ProducesResponseType(typeof(ForbiddenDateDTO), 200)] [ProducesResponseType(404)] public Task<IActionResult> GetForbiddenDateByDate(DateOnly date) Parameters date DateOnly Returns Task<IActionResult> GetForbiddenDateById(long) [HttpGet(\"GetById/{id}\")] [ProducesResponseType(typeof(UserDTO), 200)] [ProducesResponseType(404)] public Task<IActionResult> GetForbiddenDateById(long id) Parameters id long Returns Task<IActionResult> See Also ForbiddenDate ForbiddenDateRepository"
  },
  "api/haveaseat.Controllers.html": {
    "href": "api/haveaseat.Controllers.html",
    "title": "Namespace haveaseat.Controllers",
    "keywords": "Namespace haveaseat.Controllers Classes ForbiddenDateController This controller handles forbidden date related operations such as adding, editing, deleting and retrieving forbidden date information."
  },
  "api/haveaseat.DTOs.CellDTO.html": {
    "href": "api/haveaseat.DTOs.CellDTO.html",
    "title": "Class CellDTO",
    "keywords": "Class CellDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class CellDTO Inheritance object CellDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CellDTO(Cell) public CellDTO(Cell cell) Parameters cell Cell Properties Border public string Border { get; set; } Property Value string Id public long Id { get; set; } Property Value long PositionX public int PositionX { get; set; } Property Value int PositionY public int PositionY { get; set; } Property Value int"
  },
  "api/haveaseat.DTOs.DeskDTO.html": {
    "href": "api/haveaseat.DTOs.DeskDTO.html",
    "title": "Class DeskDTO",
    "keywords": "Class DeskDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class DeskDTO Inheritance object DeskDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeskDTO(Desk) public DeskDTO(Desk desk) Parameters desk Desk Properties ChairPosition public ChairPosition ChairPosition { get; set; } Property Value ChairPosition Id public long Id { get; set; } Property Value long PositionX public int PositionX { get; set; } Property Value int PositionY public int PositionY { get; set; } Property Value int"
  },
  "api/haveaseat.DTOs.ForbiddenDateDTO.html": {
    "href": "api/haveaseat.DTOs.ForbiddenDateDTO.html",
    "title": "Class ForbiddenDateDTO",
    "keywords": "Class ForbiddenDateDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class ForbiddenDateDTO Inheritance object ForbiddenDateDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ForbiddenDateDTO(ForbiddenDate) public ForbiddenDateDTO(ForbiddenDate forbiddenDate) Parameters forbiddenDate ForbiddenDate Properties Date public DateOnly Date { get; set; } Property Value DateOnly Description public string Description { get; set; } Property Value string Id public long Id { get; set; } Property Value long"
  },
  "api/haveaseat.DTOs.LongTimeReservationToCheckDTQ.html": {
    "href": "api/haveaseat.DTOs.LongTimeReservationToCheckDTQ.html",
    "title": "Class LongTimeReservationToCheckDTQ",
    "keywords": "Class LongTimeReservationToCheckDTQ Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class LongTimeReservationToCheckDTQ Inheritance object LongTimeReservationToCheckDTQ Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LongTimeReservationToCheckDTQ() [JsonConstructor] public LongTimeReservationToCheckDTQ() LongTimeReservationToCheckDTQ(Reservation) public LongTimeReservationToCheckDTQ(Reservation reservation) Parameters reservation Reservation Properties Date public DateOnly Date { get; set; } Property Value DateOnly User public UserDTO User { get; set; } Property Value UserDTO"
  },
  "api/haveaseat.DTOs.NewDeskDTO.html": {
    "href": "api/haveaseat.DTOs.NewDeskDTO.html",
    "title": "Class NewDeskDTO",
    "keywords": "Class NewDeskDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class NewDeskDTO Inheritance object NewDeskDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewDeskDTO() [JsonConstructor] public NewDeskDTO() NewDeskDTO(Desk) public NewDeskDTO(Desk desk) Parameters desk Desk Properties ChairPosition public ChairPosition ChairPosition { get; set; } Property Value ChairPosition PositionX public int PositionX { get; set; } Property Value int PositionY public int PositionY { get; set; } Property Value int"
  },
  "api/haveaseat.DTOs.NewForbiddenDateDTO.html": {
    "href": "api/haveaseat.DTOs.NewForbiddenDateDTO.html",
    "title": "Class NewForbiddenDateDTO",
    "keywords": "Class NewForbiddenDateDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class NewForbiddenDateDTO Inheritance object NewForbiddenDateDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewForbiddenDateDTO() [JsonConstructor] public NewForbiddenDateDTO() NewForbiddenDateDTO(ForbiddenDate) public NewForbiddenDateDTO(ForbiddenDate forbiddenDate) Parameters forbiddenDate ForbiddenDate Properties Date public DateOnly Date { get; set; } Property Value DateOnly Description public string Description { get; set; } Property Value string"
  },
  "api/haveaseat.DTOs.NewReservationDTO.html": {
    "href": "api/haveaseat.DTOs.NewReservationDTO.html",
    "title": "Class NewReservationDTO",
    "keywords": "Class NewReservationDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class NewReservationDTO Inheritance object NewReservationDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewReservationDTO() [JsonConstructor] public NewReservationDTO() NewReservationDTO(Reservation) public NewReservationDTO(Reservation reservation) Parameters reservation Reservation Properties Date public DateOnly Date { get; set; } Property Value DateOnly DeskId public long DeskId { get; set; } Property Value long UserId public long UserId { get; set; } Property Value long"
  },
  "api/haveaseat.DTOs.NewUserDTO.html": {
    "href": "api/haveaseat.DTOs.NewUserDTO.html",
    "title": "Class NewUserDTO",
    "keywords": "Class NewUserDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class NewUserDTO Inheritance object NewUserDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewUserDTO() [JsonConstructor] public NewUserDTO() NewUserDTO(User) public NewUserDTO(User user) Parameters user User Properties Email public string Email { get; set; } Property Value string Name public string Name { get; set; } Property Value string Password public string Password { get; set; } Property Value string Surname public string Surname { get; set; } Property Value string"
  },
  "api/haveaseat.DTOs.NewUserLoginDTO.html": {
    "href": "api/haveaseat.DTOs.NewUserLoginDTO.html",
    "title": "Class NewUserLoginDTO",
    "keywords": "Class NewUserLoginDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class NewUserLoginDTO Inheritance object NewUserLoginDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NewUserLoginDTO() [JsonConstructor] public NewUserLoginDTO() NewUserLoginDTO(User) public NewUserLoginDTO(User user) Parameters user User Properties Email public string Email { get; set; } Property Value string Password public string Password { get; set; } Property Value string"
  },
  "api/haveaseat.DTOs.ReservationDTO.html": {
    "href": "api/haveaseat.DTOs.ReservationDTO.html",
    "title": "Class ReservationDTO",
    "keywords": "Class ReservationDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class ReservationDTO Inheritance object ReservationDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReservationDTO(Reservation) public ReservationDTO(Reservation reservation) Parameters reservation Reservation Properties Date public DateOnly Date { get; set; } Property Value DateOnly Desk public DeskDTO Desk { get; set; } Property Value DeskDTO Id public long Id { get; set; } Property Value long User public UserDTO User { get; set; } Property Value UserDTO"
  },
  "api/haveaseat.DTOs.RoomDTO.html": {
    "href": "api/haveaseat.DTOs.RoomDTO.html",
    "title": "Class RoomDTO",
    "keywords": "Class RoomDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class RoomDTO Inheritance object RoomDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoomDTO(Room) public RoomDTO(Room room) Parameters room Room Properties Cells public List<CellDTO> Cells { get; } Property Value List<CellDTO> Desks public List<DeskDTO> Desks { get; } Property Value List<DeskDTO> Id public long Id { get; set; } Property Value long Name public string Name { get; set; } Property Value string"
  },
  "api/haveaseat.DTOs.RoomDTOCells.html": {
    "href": "api/haveaseat.DTOs.RoomDTOCells.html",
    "title": "Class RoomDTOCells",
    "keywords": "Class RoomDTOCells Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class RoomDTOCells Inheritance object RoomDTOCells Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoomDTOCells(Room) public RoomDTOCells(Room room) Parameters room Room Properties Cells public List<CellDTO> Cells { get; } Property Value List<CellDTO> Id public long Id { get; set; } Property Value long Name public string Name { get; set; } Property Value string"
  },
  "api/haveaseat.DTOs.RoomDTODesks.html": {
    "href": "api/haveaseat.DTOs.RoomDTODesks.html",
    "title": "Class RoomDTODesks",
    "keywords": "Class RoomDTODesks Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class RoomDTODesks Inheritance object RoomDTODesks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoomDTODesks(Room) public RoomDTODesks(Room room) Parameters room Room Properties Desks public List<DeskDTO> Desks { get; } Property Value List<DeskDTO> Id public long Id { get; set; } Property Value long Name public string Name { get; set; } Property Value string"
  },
  "api/haveaseat.DTOs.UserDTO.html": {
    "href": "api/haveaseat.DTOs.UserDTO.html",
    "title": "Class UserDTO",
    "keywords": "Class UserDTO Namespace haveaseat.DTOs Assembly haveaseat-api.dll public class UserDTO Inheritance object UserDTO Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserDTO(User) public UserDTO(User user) Parameters user User Properties Email public string Email { get; set; } Property Value string Id public long Id { get; set; } Property Value long Name public string Name { get; set; } Property Value string Role public Role Role { get; set; } Property Value Role Surname public string Surname { get; set; } Property Value string"
  },
  "api/haveaseat.DTOs.html": {
    "href": "api/haveaseat.DTOs.html",
    "title": "Namespace haveaseat.DTOs",
    "keywords": "Namespace haveaseat.DTOs Classes CellDTO DeskDTO ForbiddenDateDTO LongTimeReservationToCheckDTQ NewDeskDTO NewForbiddenDateDTO NewReservationDTO NewUserDTO NewUserLoginDTO ReservationDTO RoomDTO RoomDTOCells RoomDTODesks UserDTO"
  },
  "api/haveaseat.DbContexts.DataContext.html": {
    "href": "api/haveaseat.DbContexts.DataContext.html",
    "title": "Class DataContext",
    "keywords": "Class DataContext Namespace haveaseat.DbContexts Assembly haveaseat-api.dll public class DataContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext DataContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataContext(IConfiguration) public DataContext(IConfiguration configuration) Parameters configuration IConfiguration Properties Area public DbSet<Area> Area { get; set; } Property Value DbSet<Area> Cells public DbSet<Cell> Cells { get; set; } Property Value DbSet<Cell> Desks public DbSet<Desk> Desks { get; set; } Property Value DbSet<Desk> ForbiddenDates public DbSet<ForbiddenDate> ForbiddenDates { get; set; } Property Value DbSet<ForbiddenDate> Reservations public DbSet<Reservation> Reservations { get; set; } Property Value DbSet<Reservation> Rooms public DbSet<Room> Rooms { get; set; } Property Value DbSet<Room> Users public DbSet<User> Users { get; set; } Property Value DbSet<User> Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure the context. Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples. OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/haveaseat.DbContexts.html": {
    "href": "api/haveaseat.DbContexts.html",
    "title": "Namespace haveaseat.DbContexts",
    "keywords": "Namespace haveaseat.DbContexts Classes DataContext"
  },
  "api/haveaseat.Entities.Area.html": {
    "href": "api/haveaseat.Entities.Area.html",
    "title": "Class Area",
    "keywords": "Class Area Namespace haveaseat.Entities Assembly haveaseat-api.dll public class Area Inheritance object Area Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Height public int Height { get; set; } Property Value int Id public short Id { get; set; } Property Value short Width public int Width { get; set; } Property Value int"
  },
  "api/haveaseat.Entities.Cell.html": {
    "href": "api/haveaseat.Entities.Cell.html",
    "title": "Class Cell",
    "keywords": "Class Cell Namespace haveaseat.Entities Assembly haveaseat-api.dll public class Cell Inheritance object Cell Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Border [MaxLength(50)] public string Border { get; set; } Property Value string Id [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Key] public long Id { get; set; } Property Value long PositionX public int PositionX { get; set; } Property Value int PositionY public int PositionY { get; set; } Property Value int Room public Room Room { get; set; } Property Value Room RoomId public long RoomId { get; set; } Property Value long"
  },
  "api/haveaseat.Entities.Desk.html": {
    "href": "api/haveaseat.Entities.Desk.html",
    "title": "Class Desk",
    "keywords": "Class Desk Namespace haveaseat.Entities Assembly haveaseat-api.dll public class Desk Inheritance object Desk Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChairPosition public ChairPosition ChairPosition { get; set; } Property Value ChairPosition Id [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Key] public long Id { get; set; } Property Value long PositionX public int PositionX { get; set; } Property Value int PositionY public int PositionY { get; set; } Property Value int Reservations public ICollection<Reservation> Reservations { get; } Property Value ICollection<Reservation> Room public Room Room { get; set; } Property Value Room RoomId public long RoomId { get; set; } Property Value long"
  },
  "api/haveaseat.Entities.ForbiddenDate.html": {
    "href": "api/haveaseat.Entities.ForbiddenDate.html",
    "title": "Class ForbiddenDate",
    "keywords": "Class ForbiddenDate Namespace haveaseat.Entities Assembly haveaseat-api.dll public class ForbiddenDate Inheritance object ForbiddenDate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date public DateOnly Date { get; set; } Property Value DateOnly Description [MaxLength(140)] public string Description { get; set; } Property Value string Id [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Key] public long Id { get; set; } Property Value long"
  },
  "api/haveaseat.Entities.Reservation.html": {
    "href": "api/haveaseat.Entities.Reservation.html",
    "title": "Class Reservation",
    "keywords": "Class Reservation Namespace haveaseat.Entities Assembly haveaseat-api.dll public class Reservation Inheritance object Reservation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date public DateOnly Date { get; set; } Property Value DateOnly Desk public Desk Desk { get; set; } Property Value Desk DeskId public long DeskId { get; set; } Property Value long Id [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Key] public long Id { get; set; } Property Value long User public User User { get; set; } Property Value User UserId public long UserId { get; set; } Property Value long"
  },
  "api/haveaseat.Entities.Room.html": {
    "href": "api/haveaseat.Entities.Room.html",
    "title": "Class Room",
    "keywords": "Class Room Namespace haveaseat.Entities Assembly haveaseat-api.dll public class Room Inheritance object Room Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cells public ICollection<Cell> Cells { get; } Property Value ICollection<Cell> Desks public ICollection<Desk>? Desks { get; } Property Value ICollection<Desk> Id [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Key] public long Id { get; set; } Property Value long Name [MaxLength(4)] public string Name { get; set; } Property Value string"
  },
  "api/haveaseat.Entities.User.html": {
    "href": "api/haveaseat.Entities.User.html",
    "title": "Class User",
    "keywords": "Class User Namespace haveaseat.Entities Assembly haveaseat-api.dll public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email [MaxLength(45)] public string Email { get; set; } Property Value string Id [DatabaseGenerated(DatabaseGeneratedOption.Identity)] [Key] public long Id { get; set; } Property Value long Name [MaxLength(60)] public string Name { get; set; } Property Value string Password [MaxLength(255)] public string Password { get; set; } Property Value string Reservations public ICollection<Reservation> Reservations { get; } Property Value ICollection<Reservation> Role public Role Role { get; set; } Property Value Role Surname [MaxLength(60)] public string Surname { get; set; } Property Value string salt [Required] [MaxLength(255)] public string salt { get; set; } Property Value string"
  },
  "api/haveaseat.Entities.html": {
    "href": "api/haveaseat.Entities.html",
    "title": "Namespace haveaseat.Entities",
    "keywords": "Namespace haveaseat.Entities Classes Area Cell Desk ForbiddenDate Reservation Room User"
  },
  "api/haveaseat.Models.ChairPosition.html": {
    "href": "api/haveaseat.Models.ChairPosition.html",
    "title": "Enum ChairPosition",
    "keywords": "Enum ChairPosition Namespace haveaseat.Models Assembly haveaseat-api.dll public enum ChairPosition Fields BOTTOM = 2 LEFT = 3 RIGHT = 1 TOP = 0"
  },
  "api/haveaseat.Models.Role.html": {
    "href": "api/haveaseat.Models.Role.html",
    "title": "Enum Role",
    "keywords": "Enum Role Namespace haveaseat.Models Assembly haveaseat-api.dll public enum Role Fields ADMIN = 0 EMPLOYEE = 1"
  },
  "api/haveaseat.Models.html": {
    "href": "api/haveaseat.Models.html",
    "title": "Namespace haveaseat.Models",
    "keywords": "Namespace haveaseat.Models Enums ChairPosition Role"
  },
  "api/haveaseat.Repositories.AuthenticationRepository.html": {
    "href": "api/haveaseat.Repositories.AuthenticationRepository.html",
    "title": "Class AuthenticationRepository",
    "keywords": "Class AuthenticationRepository Namespace haveaseat.Repositories Assembly haveaseat-api.dll public class AuthenticationRepository : IAuthenticationRepository Inheritance object AuthenticationRepository Implements IAuthenticationRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthenticationRepository(DataContext) public AuthenticationRepository(DataContext context) Parameters context DataContext Methods GetSaltByEmail(string) public Task<string> GetSaltByEmail(string email) Parameters email string Returns Task<string> GetUserByEmail(string) public Task<UserDTO> GetUserByEmail(string email) Parameters email string Returns Task<UserDTO> GetUserById(long) public Task<UserDTO> GetUserById(long id) Parameters id long Returns Task<UserDTO> LoginUser(NewUserLoginDTO) public Task<bool> LoginUser(NewUserLoginDTO user) Parameters user NewUserLoginDTO Returns Task<bool> RegisterUser(NewUserDTO, string) public Task<string> RegisterUser(NewUserDTO user, string Salt) Parameters user NewUserDTO Salt string Returns Task<string>"
  },
  "api/haveaseat.Repositories.ForbiddenDateRepository.html": {
    "href": "api/haveaseat.Repositories.ForbiddenDateRepository.html",
    "title": "Class ForbiddenDateRepository",
    "keywords": "Class ForbiddenDateRepository Namespace haveaseat.Repositories Assembly haveaseat-api.dll public class ForbiddenDateRepository : IForbiddenDateRepository Inheritance object ForbiddenDateRepository Implements IForbiddenDateRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ForbiddenDateRepository(DataContext) public ForbiddenDateRepository(DataContext context) Parameters context DataContext Methods AddForbiddenDate(NewForbiddenDateDTO) public Task<NewForbiddenDateDTO> AddForbiddenDate(NewForbiddenDateDTO newForbiddenDate) Parameters newForbiddenDate NewForbiddenDateDTO Returns Task<NewForbiddenDateDTO> DeleteForbiddenDateByDate(DateOnly) public Task<bool> DeleteForbiddenDateByDate(DateOnly date) Parameters date DateOnly Returns Task<bool> EditForbiddenDateByDate(NewForbiddenDateDTO) public Task<bool> EditForbiddenDateByDate(NewForbiddenDateDTO newForbiddenDate) Parameters newForbiddenDate NewForbiddenDateDTO Returns Task<bool> GetAllForbiddenDates() public Task<List<ForbiddenDateDTO>> GetAllForbiddenDates() Returns Task<List<ForbiddenDateDTO>> GetForbiddenDateByDate(DateOnly) public Task<ForbiddenDateDTO> GetForbiddenDateByDate(DateOnly date) Parameters date DateOnly Returns Task<ForbiddenDateDTO> GetForbiddenDateById(long) public Task<ForbiddenDateDTO> GetForbiddenDateById(long id) Parameters id long Returns Task<ForbiddenDateDTO>"
  },
  "api/haveaseat.Repositories.Interfaces.IAuthenticationRepository.html": {
    "href": "api/haveaseat.Repositories.Interfaces.IAuthenticationRepository.html",
    "title": "Interface IAuthenticationRepository",
    "keywords": "Interface IAuthenticationRepository Namespace haveaseat.Repositories.Interfaces Assembly haveaseat-api.dll public interface IAuthenticationRepository Methods GetSaltByEmail(string) Task<string> GetSaltByEmail(string email) Parameters email string Returns Task<string> GetUserByEmail(string) Task<UserDTO> GetUserByEmail(string email) Parameters email string Returns Task<UserDTO> GetUserById(long) Task<UserDTO> GetUserById(long id) Parameters id long Returns Task<UserDTO> LoginUser(NewUserLoginDTO) Task<bool> LoginUser(NewUserLoginDTO user) Parameters user NewUserLoginDTO Returns Task<bool> RegisterUser(NewUserDTO, string) Task<string> RegisterUser(NewUserDTO user, string Salt) Parameters user NewUserDTO Salt string Returns Task<string>"
  },
  "api/haveaseat.Repositories.Interfaces.IForbiddenDateRepository.html": {
    "href": "api/haveaseat.Repositories.Interfaces.IForbiddenDateRepository.html",
    "title": "Interface IForbiddenDateRepository",
    "keywords": "Interface IForbiddenDateRepository Namespace haveaseat.Repositories.Interfaces Assembly haveaseat-api.dll public interface IForbiddenDateRepository Methods AddForbiddenDate(NewForbiddenDateDTO) Task<NewForbiddenDateDTO> AddForbiddenDate(NewForbiddenDateDTO newForbiddenDate) Parameters newForbiddenDate NewForbiddenDateDTO Returns Task<NewForbiddenDateDTO> DeleteForbiddenDateByDate(DateOnly) Task<bool> DeleteForbiddenDateByDate(DateOnly date) Parameters date DateOnly Returns Task<bool> EditForbiddenDateByDate(NewForbiddenDateDTO) Task<bool> EditForbiddenDateByDate(NewForbiddenDateDTO newForbiddenDate) Parameters newForbiddenDate NewForbiddenDateDTO Returns Task<bool> GetAllForbiddenDates() Task<List<ForbiddenDateDTO>> GetAllForbiddenDates() Returns Task<List<ForbiddenDateDTO>> GetForbiddenDateByDate(DateOnly) Task<ForbiddenDateDTO> GetForbiddenDateByDate(DateOnly date) Parameters date DateOnly Returns Task<ForbiddenDateDTO> GetForbiddenDateById(long) Task<ForbiddenDateDTO> GetForbiddenDateById(long id) Parameters id long Returns Task<ForbiddenDateDTO>"
  },
  "api/haveaseat.Repositories.Interfaces.IMapRepository.html": {
    "href": "api/haveaseat.Repositories.Interfaces.IMapRepository.html",
    "title": "Interface IMapRepository",
    "keywords": "Interface IMapRepository Namespace haveaseat.Repositories.Interfaces Assembly haveaseat-api.dll public interface IMapRepository Methods AddNewDesk(NewDeskDTO, Cell) Task<bool> AddNewDesk(NewDeskDTO newDesk, Cell cell) Parameters newDesk NewDeskDTO cell Cell Returns Task<bool> DeleteDesk(NewDeskDTO) Task<bool> DeleteDesk(NewDeskDTO deskDTO) Parameters deskDTO NewDeskDTO Returns Task<bool> EditChairPositionByDeskPosition(int, int, ChairPosition) Task<bool> EditChairPositionByDeskPosition(int positonX, int positonY, ChairPosition chairPosition) Parameters positonX int positonY int chairPosition ChairPosition Returns Task<bool> GetAllDesks() Task<List<RoomDTODesks>> GetAllDesks() Returns Task<List<RoomDTODesks>> GetAllMap() Task<List<RoomDTO>> GetAllMap() Returns Task<List<RoomDTO>> GetAllRooms() Task<List<RoomDTOCells>> GetAllRooms() Returns Task<List<RoomDTOCells>> GetCellByPosition(int, int) Task<Cell> GetCellByPosition(int positionX, int positionY) Parameters positionX int positionY int Returns Task<Cell>"
  },
  "api/haveaseat.Repositories.Interfaces.IReservationRepository.html": {
    "href": "api/haveaseat.Repositories.Interfaces.IReservationRepository.html",
    "title": "Interface IReservationRepository",
    "keywords": "Interface IReservationRepository Namespace haveaseat.Repositories.Interfaces Assembly haveaseat-api.dll public interface IReservationRepository Methods DeleteReservationById(long) Task<bool> DeleteReservationById(long reservationId) Parameters reservationId long Returns Task<bool> GetAllUsersFromReservationsByDate(DateOnly) Task<List<UserDTO>> GetAllUsersFromReservationsByDate(DateOnly date) Parameters date DateOnly Returns Task<List<UserDTO>> GetReservationsByDay(DateOnly) Task<List<ReservationDTO>> GetReservationsByDay(DateOnly date) Parameters date DateOnly Returns Task<List<ReservationDTO>> GetReservationsByUserEmail(string) Task<List<ReservationDTO>> GetReservationsByUserEmail(string email) Parameters email string Returns Task<List<ReservationDTO>> InsertReservations(NewReservationDTO) Task<NewReservationDTO> InsertReservations(NewReservationDTO reservation) Parameters reservation NewReservationDTO Returns Task<NewReservationDTO> longTimeReservationToCheckDTQByDeskId(long) Task<List<LongTimeReservationToCheckDTQ>> longTimeReservationToCheckDTQByDeskId(long id) Parameters id long Returns Task<List<LongTimeReservationToCheckDTQ>>"
  },
  "api/haveaseat.Repositories.Interfaces.html": {
    "href": "api/haveaseat.Repositories.Interfaces.html",
    "title": "Namespace haveaseat.Repositories.Interfaces",
    "keywords": "Namespace haveaseat.Repositories.Interfaces Interfaces IAuthenticationRepository IForbiddenDateRepository IMapRepository IReservationRepository"
  },
  "api/haveaseat.Repositories.MapRepository.html": {
    "href": "api/haveaseat.Repositories.MapRepository.html",
    "title": "Class MapRepository",
    "keywords": "Class MapRepository Namespace haveaseat.Repositories Assembly haveaseat-api.dll public class MapRepository : IMapRepository Inheritance object MapRepository Implements IMapRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapRepository(DataContext) public MapRepository(DataContext context) Parameters context DataContext Methods AddNewDesk(NewDeskDTO, Cell) public Task<bool> AddNewDesk(NewDeskDTO newDesk, Cell cell) Parameters newDesk NewDeskDTO cell Cell Returns Task<bool> DeleteDesk(NewDeskDTO) public Task<bool> DeleteDesk(NewDeskDTO deskDTO) Parameters deskDTO NewDeskDTO Returns Task<bool> EditChairPositionByDeskPosition(int, int, ChairPosition) public Task<bool> EditChairPositionByDeskPosition(int positonX, int positonY, ChairPosition chairPosition) Parameters positonX int positonY int chairPosition ChairPosition Returns Task<bool> GetAllDesks() public Task<List<RoomDTODesks>> GetAllDesks() Returns Task<List<RoomDTODesks>> GetAllMap() public Task<List<RoomDTO>> GetAllMap() Returns Task<List<RoomDTO>> GetAllRooms() public Task<List<RoomDTOCells>> GetAllRooms() Returns Task<List<RoomDTOCells>> GetCellByPosition(int, int) public Task<Cell> GetCellByPosition(int positionX, int positionY) Parameters positionX int positionY int Returns Task<Cell>"
  },
  "api/haveaseat.Repositories.ReservationRepository.html": {
    "href": "api/haveaseat.Repositories.ReservationRepository.html",
    "title": "Class ReservationRepository",
    "keywords": "Class ReservationRepository Namespace haveaseat.Repositories Assembly haveaseat-api.dll public class ReservationRepository : IReservationRepository Inheritance object ReservationRepository Implements IReservationRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReservationRepository(DataContext) public ReservationRepository(DataContext context) Parameters context DataContext Methods DeleteReservationById(long) public Task<bool> DeleteReservationById(long reservationId) Parameters reservationId long Returns Task<bool> GetAllUsersFromReservationsByDate(DateOnly) public Task<List<UserDTO>> GetAllUsersFromReservationsByDate(DateOnly date) Parameters date DateOnly Returns Task<List<UserDTO>> GetReservationsByDay(DateOnly) public Task<List<ReservationDTO>> GetReservationsByDay(DateOnly date) Parameters date DateOnly Returns Task<List<ReservationDTO>> GetReservationsByUserEmail(string) public Task<List<ReservationDTO>> GetReservationsByUserEmail(string email) Parameters email string Returns Task<List<ReservationDTO>> InsertReservations(NewReservationDTO) public Task<NewReservationDTO> InsertReservations(NewReservationDTO reservation) Parameters reservation NewReservationDTO Returns Task<NewReservationDTO> longTimeReservationToCheckDTQByDeskId(long) public Task<List<LongTimeReservationToCheckDTQ>> longTimeReservationToCheckDTQByDeskId(long id) Parameters id long Returns Task<List<LongTimeReservationToCheckDTQ>>"
  },
  "api/haveaseat.Repositories.html": {
    "href": "api/haveaseat.Repositories.html",
    "title": "Namespace haveaseat.Repositories",
    "keywords": "Namespace haveaseat.Repositories Classes AuthenticationRepository ForbiddenDateRepository MapRepository ReservationRepository"
  },
  "api/haveaseat_api.Controllers.AreaController.html": {
    "href": "api/haveaseat_api.Controllers.AreaController.html",
    "title": "Class AreaController",
    "keywords": "Class AreaController Namespace haveaseat_api.Controllers Assembly haveaseat-api.dll This controller provides data from the Area table in the database. [ApiController] [Route(\"api/[controller]\")] public class AreaController : ControllerBase Inheritance object ControllerBase AreaController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AreaController(DataContext) This controller provides data from the Area table in the database. public AreaController(DataContext _context) Parameters _context DataContext The DataContext instance used to interact with the database. See Also Area DataContext Methods GetArea() This task provides Area object by http request at */GetArea [HttpGet(\"GetArea\")] [ProducesResponseType(typeof(Area), 200)] public Task<IActionResult> GetArea() Returns Task<IActionResult> Returns object of the class Area. See Also Area DataContext"
  },
  "api/haveaseat_api.Controllers.AuthenticationController.html": {
    "href": "api/haveaseat_api.Controllers.AuthenticationController.html",
    "title": "Class AuthenticationController",
    "keywords": "Class AuthenticationController Namespace haveaseat_api.Controllers Assembly haveaseat-api.dll This controller handles user-related operations such as registration, login and retrieving user informations. [ApiController] [Route(\"api/[controller]\")] public class AuthenticationController : ControllerBase Inheritance object ControllerBase AuthenticationController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthenticationController(IAuthenticationRepository) This controller handles user-related operations such as registration, login and retrieving user informations. public AuthenticationController(IAuthenticationRepository authenticationRepository) Parameters authenticationRepository IAuthenticationRepository The IAuthenticationRepository instance used for accessing methods to manipulate user data. See Also User IAuthenticationRepository Methods GetUserByEmail(string) This task retrieves user information based on the provided email from the HTTP GET request. [HttpGet(\"GetByEmail/{email}\")] [ProducesResponseType(typeof(UserDTO), 200)] [ProducesResponseType(404)] public Task<IActionResult> GetUserByEmail(string email) Parameters email string The email address of the user to retrieve. Returns Task<IActionResult> Returns a OK status and UserDTO object if the user exist in the database, a NotFound status if user doesn't exist in database. See Also UserDTO GetUserById(long) This task retrives user information based on the provided id from the HTTP GET request. [HttpGet(\"GetById/{id}\")] [ProducesResponseType(typeof(UserDTO), 200)] [ProducesResponseType(404)] public Task<IActionResult> GetUserById(long id) Parameters id long The id of the user to retrieve. Returns Task<IActionResult> Returns an Ok status and UserDTO object if the user exists in the database, a NotFound status if the user doesn't exist in the database. See Also UserDTO LoginUser(NewUserLoginDTO) This tasks logins a user with the data provided from the HTTP POST request. [HttpPost(\"Login\")] [ProducesResponseType(typeof(bool), 202)] [ProducesResponseType(400)] [ProducesResponseType(500)] public Task<IActionResult> LoginUser(NewUserLoginDTO user) Parameters user NewUserLoginDTO The NewUserLoginDTO object containing the user's login details. Returns Task<IActionResult> Returns a Accepted status and true if all requirements are met, a BadRequest status if the user already exists, an InternalServerError status if the record wasn't added to the database despite all requirements being met. See Also NewUserLoginDTO RegisterUser(NewUserDTO) This tasks registers a user with the data provided from the HTTP POST request. [HttpPost(\"register\")] [ProducesResponseType(typeof(NewUserDTO), 201)] [ProducesResponseType(500)] [ProducesResponseType(400)] public Task<IActionResult> RegisterUser(NewUserDTO newUser) Parameters newUser NewUserDTO The NewUserDTO object containing the user's registration details. Returns Task<IActionResult> Returns a Created status and NewUserDTO object if all requirements are met, a BadRequest status if the user already exists, an InternalServerError status if the record wasn't added to the database despite all requirements being met, See Also NewUserDTO See Also User IAuthenticationRepository"
  },
  "api/haveaseat_api.Controllers.MapController.html": {
    "href": "api/haveaseat_api.Controllers.MapController.html",
    "title": "Class MapController",
    "keywords": "Class MapController Namespace haveaseat_api.Controllers Assembly haveaseat-api.dll [Route(\"api/[controller]\")] [ApiController] public class MapController : ControllerBase Inheritance object ControllerBase MapController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MapController(IMapRepository) public MapController(IMapRepository mapRepository) Parameters mapRepository IMapRepository Methods AddNewDesk(NewDeskDTO) [HttpPost(\"AddNewDesk\")] [ProducesResponseType(typeof(bool), 201)] [ProducesResponseType(400)] public Task<IActionResult> AddNewDesk(NewDeskDTO newDeskDTO) Parameters newDeskDTO NewDeskDTO Returns Task<IActionResult> DeleteDesk(NewDeskDTO) [HttpDelete(\"DeleteDesk\")] [ProducesResponseType(typeof(bool), 200)] [ProducesResponseType(400)] public Task<IActionResult> DeleteDesk(NewDeskDTO deskDTO) Parameters deskDTO NewDeskDTO Returns Task<IActionResult> EditChairPositionByDeskPosition(int, int, ChairPosition) [HttpPost(\"EditChairPositionByDeskPosition\")] [ProducesResponseType(typeof(bool), 200)] [ProducesResponseType(400)] public Task<IActionResult> EditChairPositionByDeskPosition(int positonX, int positonY, ChairPosition chairPosition) Parameters positonX int positonY int chairPosition ChairPosition Returns Task<IActionResult> GetAllDesks() [HttpGet(\"getAllDesks\")] [ProducesResponseType(typeof(List<RoomDTODesks>), 200)] public Task<IActionResult> GetAllDesks() Returns Task<IActionResult> GetAllMap() [HttpGet(\"GetAllMap\")] [ProducesResponseType(typeof(List<RoomDTO>), 200)] public Task<IActionResult> GetAllMap() Returns Task<IActionResult> GetAllRooms() [HttpGet(\"getAllRooms\")] [ProducesResponseType(typeof(List<RoomDTOCells>), 200)] public Task<IActionResult> GetAllRooms() Returns Task<IActionResult>"
  },
  "api/haveaseat_api.Controllers.ReservationController.html": {
    "href": "api/haveaseat_api.Controllers.ReservationController.html",
    "title": "Class ReservationController",
    "keywords": "Class ReservationController Namespace haveaseat_api.Controllers Assembly haveaseat-api.dll [ApiController] [Route(\"api/[controller]\")] public class ReservationController : ControllerBase Inheritance object ControllerBase ReservationController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReservationController(IReservationRepository) public ReservationController(IReservationRepository _reservationRepository) Parameters _reservationRepository IReservationRepository Methods DeleteReservation(long) [HttpDelete(\"delete/{id}\")] [ProducesResponseType(typeof(bool), 202)] [ProducesResponseType(400)] public Task<IActionResult> DeleteReservation(long id) Parameters id long Returns Task<IActionResult> GetAllReservationsByDeskId(long) [HttpGet(\"getAllReservationsByDeskId/{id}\")] [ProducesResponseType(typeof(List<LongTimeReservationToCheckDTQ>), 200)] public Task<IActionResult> GetAllReservationsByDeskId(long id) Parameters id long Returns Task<IActionResult> GetAllUsersFromReservationsByDate(DateOnly) [HttpGet(\"getAllUsersWithReservationByDay/{date}\")] [ProducesResponseType(typeof(List<UserDTO>), 200)] [ProducesResponseType(400)] public Task<IActionResult> GetAllUsersFromReservationsByDate(DateOnly date) Parameters date DateOnly Returns Task<IActionResult> InsertReservation(NewReservationDTO) [HttpPost(\"newReservation\")] [ProducesResponseType(201)] public Task<IActionResult> InsertReservation(NewReservationDTO reservation) Parameters reservation NewReservationDTO Returns Task<IActionResult> ReservationsByDate(DateOnly) [HttpGet(\"getByDay/{date}\")] [ProducesResponseType(typeof(List<ReservationDTO>), 200)] public Task<IActionResult> ReservationsByDate(DateOnly date) Parameters date DateOnly Returns Task<IActionResult> ReservationsByEmail(string) [HttpGet(\"getByEmail/{email}\")] [ProducesResponseType(typeof(List<ReservationDTO>), 200)] public Task<IActionResult> ReservationsByEmail(string email) Parameters email string Returns Task<IActionResult>"
  },
  "api/haveaseat_api.Controllers.html": {
    "href": "api/haveaseat_api.Controllers.html",
    "title": "Namespace haveaseat_api.Controllers",
    "keywords": "Namespace haveaseat_api.Controllers Classes AreaController This controller provides data from the Area table in the database. AuthenticationController This controller handles user-related operations such as registration, login and retrieving user informations. MapController ReservationController"
  },
  "api/haveaseat_api.Seeders.DeskSeeder.html": {
    "href": "api/haveaseat_api.Seeders.DeskSeeder.html",
    "title": "Class DeskSeeder",
    "keywords": "Class DeskSeeder Namespace haveaseat_api.Seeders Assembly haveaseat-api.dll public static class DeskSeeder Inheritance object DeskSeeder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SeedDesks(WebApplication) public static WebApplication SeedDesks(this WebApplication app) Parameters app WebApplication Returns WebApplication"
  },
  "api/haveaseat_api.Seeders.MapSeeder.html": {
    "href": "api/haveaseat_api.Seeders.MapSeeder.html",
    "title": "Class MapSeeder",
    "keywords": "Class MapSeeder Namespace haveaseat_api.Seeders Assembly haveaseat-api.dll public static class MapSeeder Inheritance object MapSeeder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SeedMap(WebApplication) public static WebApplication SeedMap(this WebApplication app) Parameters app WebApplication Returns WebApplication"
  },
  "api/haveaseat_api.Seeders.html": {
    "href": "api/haveaseat_api.Seeders.html",
    "title": "Namespace haveaseat_api.Seeders",
    "keywords": "Namespace haveaseat_api.Seeders Classes DeskSeeder MapSeeder"
  },
  "api/haveaseatapi.Migrations.NamesAndSurnames.html": {
    "href": "api/haveaseatapi.Migrations.NamesAndSurnames.html",
    "title": "Class NamesAndSurnames",
    "keywords": "Class NamesAndSurnames Namespace haveaseatapi.Migrations Assembly haveaseat-api.dll A base class inherited by each EF Core migration. [DbContext(typeof(DataContext))] [Migration(\"20240906074006_NamesAndSurnames\")] public class NamesAndSurnames : Migration Inheritance object Migration NamesAndSurnames Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/haveaseatapi.Migrations.html": {
    "href": "api/haveaseatapi.Migrations.html",
    "title": "Namespace haveaseatapi.Migrations",
    "keywords": "Namespace haveaseatapi.Migrations Classes NamesAndSurnames A base class inherited by each EF Core migration."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}